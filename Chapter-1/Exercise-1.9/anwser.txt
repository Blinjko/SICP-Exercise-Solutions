The procedures for quick reference:

# Procedure 1
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

How the above process grows when the following is called (+ 4 5)

(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7)
(inc 8)
9

The process procedure 1 generates is a linear recursive process. The reason it is recurisve is because the interpreter must keep track of a call to (inc) every time the procedure is called, unless ais 0.


---------------------------------


# Procedure 2
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

How the above process grows when the following is called (+ 4 5)

(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9

The process generated by procedure 2 is a iterative process. The reason it is iterative and not recursive is because the variables 'a' and 'b' keep the current state of the procedure, and the procedure doesn't have to keep track of any procedure calls "behind the curtian" so to say.
